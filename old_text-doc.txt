					1.FCFS

#include<bits/stdc++.h>
using namespace std;
struct Process{
 int pid;
 int At;
 int wt;
 int tat;
 int ct;
 int bt;
};

void findwt( Process p[], int n){
   p[0].wt = 0;
   for(int i=0; i<n; i++)
   {
       p[i].wt = p[i].tat - p[i].bt;
   }
}
void findtat(Process p[], int n){
    for(int i=0; i<n; i++)
   {
       p[i].tat = p[i].ct - p[i].At;
   }
}
void findct( Process p[], int n)
{
    for(int i=0; i<n-1; i++)
    {
        for(int j= i+1; j<n; j++)
        {
            if(p[i].At > p[j].At)
                swap(p[i], p[j]);
        }
    }
    p[0].ct = p[0].At + p[0].bt;

    for(int i = 0;i<n; i++)
    {
        if(p[i].At > p[i-1].ct)
            p[i].ct = p[i].At + p[i].bt;
        else
            p[i].ct = p[i-1].ct + p[i].bt;
    }
}
void printFCFS(Process p[], int n)
{
    cout<<"Fcfs scheduling: \n";
    cout<<"Pid\tArrival Time\tBurstTime\tTurnaround Time\tWaitingTime\n";
    for(int i = 0; i<n ; i++)
    {
        cout<<p[i].pid<<"\t"<<p[i].At<<"\t"
            <<p[i].bt<<"\t"<<p[i].ct<<"\t\t"
            <<p[i].tat<<"\t\t"<<p[i].wt<<"\n";
    }
}
void findFCFS(Process p[], int n){
    findct(p, n);
    findtat(p, n);
    findwt(p, n);

}
int main()
{
    int n;
    cout<<"Enter no of processes: ";
    cin>>n;
    Process p[n];//mone thake na

    for(int i = 0; i<n ; i++){
            p[i].pid = i+1;
    cout<<"Process P"<<i+1<<" - Arrivaltime: ";
    cin>>p[i].At;

    cout<<"Process"<<i+1<<" - Burst TIme: ";
    cin>>p[i].bt;
    }
    findFCFS(p, n);
    printFCFS(p, n);
}




						2.SHORTEST JOB FIRST


#include <iostream>

using namespace std;

int main() {
    int n;
    cout << "Enter number of processes: ";
    cin >> n;

    int at[n], bt[n], ct[n], tat[n], wt[n], pid[n], completed = 0, time = 0;
    bool done[n] = {false};
    double totalTat = 0, totalWt = 0;



    for (int i = 0; i < n; i++) {
        pid[i] = i + 1;
        cout << "Enter Arrival Time and Burst Time for Process P" << pid[i] << ": ";
        cin >> at[i] >> bt[i];
    }

    while (completed < n) {
        int idx = -1, minBt = 1e9;

        for (int i = 0; i < n; i++) {
            if (!done[i] && at[i] <= time && bt[i] < minBt) {
                minBt = bt[i];
                idx = i;
            }
        }

        if (idx == -1) {
            time++;
        } else {
            ct[idx] = time + bt[idx];
            tat[idx] = ct[idx] - at[idx];
            wt[idx] = tat[idx] - bt[idx];

            totalTat += tat[idx];
            totalWt += wt[idx];

            time = ct[idx];
            done[idx] = true;
            completed++;
        }
    }

    cout << "\nProcess\tAT\tBT\tCT\tTAT\tWT\n";
    for (int i = 0; i < n; i++) {
        cout << "P" << pid[i] << "\t" << at[i] << "\t" << bt[i] << "\t"
             << ct[i] << "\t" << tat[i] << "\t" << wt[i] << "\n";
    }

    cout << "Average Turnaround Time: " << totalTat / n << endl;
    cout << "Average Waiting Time: " << totalWt / n << endl;

    return 0;
}

	







						3.ROUND ROBIN




#include <iostream>
#include <queue>
using namespace std;

struct Process {
    int pid;
    int At;  // Arrival Time
    int Bt;  // Burst Time
    int Rt;  // Remaining Time
    int Ct;  // Completion Time
    int Tat; // Turnaround Time
    int Wt;  // Waiting Time
};

void roundRobin(Process p[], int n, int tq) {
    queue<int> q;
    int time = 0;
    int done = 0;
    bool inQ[n] = {false};

    while (done < n) {
        for (int i = 0; i < n; i++) {
            if (p[i].At <= time && !inQ[i] && p[i].Rt > 0) {
                q.push(i);
                inQ[i] = true;
            }
        }

        if (!q.empty()) {
            int idx = q.front();
            q.pop();

            int exec = min(tq, p[idx].Rt);
            time += exec;
            p[idx].Rt -= exec;

            if (p[idx].Rt == 0) {
                p[idx].Ct = time;
                p[idx].Tat = p[idx].Ct - p[idx].At;
                p[idx].Wt = p[idx].Tat - p[idx].Bt;
                done++;
            }

            for (int i = 0; i < n; i++) {
                if (p[i].At > time - exec && p[i].At <= time && !inQ[i] && p[i].Rt > 0) {
                    q.push(i);
                    inQ[i] = true;
                }
            }

            if (p[idx].Rt > 0) {
                q.push(idx);
            }
        } else {
            time++;
        }
    }
}

void printRR(Process p[], int n) {
    cout << "\nRound Robin Scheduling:\n";
    cout << "PID\tAt\tBt\tCt\tTat\tWt\n";
    for (int i = 0; i < n; i++) {
        cout << p[i].pid << "\t" << p[i].At << "\t"
             << p[i].Bt << "\t" << p[i].Ct << "\t"
             << p[i].Tat << "\t" << p[i].Wt << "\n";
    }
}

int main() {
    int n, tq;
    cout << "Enter number of processes: ";
    cin >> n;

    Process p[n];

    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        cout << "Process " << i + 1 << " - Arrival Time: ";
        cin >> p[i].At;
        cout << "Process " << i + 1 << " - Burst Time: ";
        cin >> p[i].Bt;
        p[i].Rt = p[i].Bt;
    }

    cout << "Enter Time Quantum: ";
    cin >> tq;

    roundRobin(p, n, tq);
    printRR(p, n);

    return 0;
}






						4.PRIORITY SCHEDULING NON PREEMTIVE




#include <iostream>
using namespace std;

int main() {
    int n;

    // Input number of processes
    cout << "Enter the number of processes: ";
    cin >> n;

    int pid[n], bt[n], at[n], pr[n], wt[n], tat[n];
    bool completed[n] = {false};

    // Input process details
    for (int i = 0; i < n; i++) {
        cout << "Enter arrival time, burst time, and priority for process " << i + 1 << ": ";
        cin >> at[i] >> bt[i] >> pr[i];
        pid[i] = i + 1;  // Process ID
    }

    int time = 0, completedCount = 0;

    // Priority Scheduling (Non-preemptive)
    while (completedCount < n) {
        int highestPriority = -1, selectedProcess = -1;

        // Find the highest priority process that has arrived
        for (int i = 0; i < n; i++) {
            if (!completed[i] && at[i] <= time) {
                if (selectedProcess == -1 || pr[i] > highestPriority) {
                    highestPriority = pr[i];
                    selectedProcess = i;
                }
            }
        }

        if (selectedProcess == -1) {
            time++;  // No process available, move time forward
        } else {
            wt[selectedProcess] = time - at[selectedProcess];  // Waiting time
            tat[selectedProcess] = wt[selectedProcess] + bt[selectedProcess];  // Turnaround time
            time += bt[selectedProcess];  // Move time forward
            completed[selectedProcess] = true;
            completedCount++;
        }
    }

    // Display the results
    cout << "\nProcess\tAT\tBT\tPriority\tWT\tTAT\n";
    for (int i = 0; i < n; i++) {
        cout << pid[i] << "\t" << at[i] << "\t" << bt[i] << "\t" << pr[i] << "\t\t"
             << wt[i] << "\t" << tat[i] << "\n";
    }

    return 0;
}

                                         



						5.Bankers algorithm




#include<bits/stdc++.h>
using namespace std;

const int P = 5;
const int R = 3;

int alloc[P][R];
int maxN[P][R];
int remN[P][R];
int avail[R];
int total_Res[R];

void calRemN()
{
     for(int i = 0; i<P ;i++)
    {
        for(int j = 0; j<R ;j++) remN[i][j] = maxN[i][j] - alloc[i][j];
    }
}
void calAvail(){
     for(int j = 0; j<R ;j++){
        int sum_alloc = 0;
        for(int i = 0; i<P ;i++){
            sum_alloc += alloc[i][j];
     }

     avail[j] = total_Res[j] - sum_alloc;
}
}
void canAlloc( int (&remN)[P][R], int (&avail)[R], int (&alloc)[P][R], bool (&finished)[P] ){
    bool progress = true;

    while(progress){
        progress = false;

    for (int i = 0; i<P ; i++){
        if (finished[i]) continue;//mone thake na
        bool canExecute = true;//mone thake na

            for (int j = 0 ; j<R; j++)
            {
                if(remN[i][j] > avail[j])
                {
                    canExecute = false;
                    break;
                }

            }
            if(canExecute){
                cout<<"Process P"<<i<< " is executing and releasing resources.\n";
            for(int j =0; j<R ; j++)
            {
                avail[j] += alloc[i][j];
                remN[i][j] = 0;
            }
            finished[i] = true;
            progress = true ;
        }}
    }
    bool allfinished = true;
    for(int i = 0;i<P;i++)
    {
        if(!finished[i]){
            allfinished = false;
            break;//mone thake na}
    }}
    if(allfinished)
        cout<<"System is safe .All processes executed.";
    else
        cout<<"some processes can not execute.";

}
int main()
{
    cout<<"Enter Total res for A B C :";
    for(int i = 0; i<R ; i++)
    cin>>total_Res[i];

    cout<<"Enter allocation Matrix :\n";
    for(int i = 0; i<P ;i++)
    {
        for(int j = 0; j<R ;j++) cin>>alloc[i][j];
    }
    cout<<"Enter Max Need Matrix :\n";
     for(int i = 0; i<P ;i++)
    {
        for(int j = 0; j<R ;j++) cin>>maxN[i][j];
    }
    calAvail();
    calRemN();
    bool finished[P] = {false};//bracket main a hobe mone thake na
    canAlloc(remN, avail, alloc, finished);

}


					



					6.counting semaphore






#include <bits/stdc++.h>
#include <semaphore.h>
#include <unistd.h>  // for sleep()
using namespace std;

sem_t count_sem;  // Counting semaphore for critical section entry limit
sem_t mtx;        // Binary semaphore for synchronized output

void task(int id) {
    sem_wait(&mtx);   // Lock for printing
    cout << "Thread " << id << " is waiting to enter..." << endl;
    sem_post(&mtx);   // Unlock for printing

    sem_wait(&count_sem);  // Wait (P) to enter critical section

    sem_wait(&mtx);
    cout << "Thread " << id << " is inside critical section." << endl;
    sem_post(&mtx);

    sleep(2);  // Simulate work in critical section

    sem_wait(&mtx);
    cout << "Thread " << id << " is leaving critical section." << endl;
    sem_post(&mtx);

    sem_post(&count_sem);  // Signal (V) after leaving critical section
}

int main() {
    int num_threads = 5;

    sem_init(&count_sem, 0, 3);  // Initialize counting semaphore with value 3
    sem_init(&mtx, 0, 1);

    thread t[num_threads];

    for (int i = 0; i < num_threads; i++)

         t[i] = thread(task, i + 1);

    for (int i = 0; i < num_threads; i++)

         t[i].join();
}


					7.Bounded_buffer



#include<bits/stdc++.h>
#include <semaphore.h>
#include <unistd.h>  // for sleep()
using namespace std;

const int BUFFER_SIZE = 10;   // Buffer size
const int MAX_ITEMS = 5;     // Maximum number of items to be produced
queue<int> buffer;           // Shared Buffer

sem_t empt_y;    // Counts empty slots
sem_t full;     // Counts full slots
sem_t mtx;    // Binary semaphore for critical section

void producer(int id, int &produced_items) {
    int item = 1;
    while (produced_items < MAX_ITEMS) {
        sem_wait(&empt_y);   // Wait for empty slot
        sem_wait(&mtx);   // Wait for mutex (lock)

        // Critical Section
        buffer.push(item);
        sleep(1);// Simulate production time,
        cout << "Producer " << id << " produced item " << item << endl;
        produced_items++;

        sem_post(&mtx);   // Release mutex (unlock)
        sem_post(&full);    // Increase full slots

        item++;

    }
}
void consumer(int id, int &consumed_items) {
    while (consumed_items < MAX_ITEMS) {
        sem_wait(&full);    // Wait for full slot
        sem_wait(&mtx);   // Wait for mutex (lock)
        // Critical Section
        int item = buffer.front();
        buffer.pop();
         sleep(2);  // Simulate consumption time
        cout << "Consumer " << id << " consumed item " << item << endl;
        consumed_items++;

        sem_post(&mtx);   // Release mutex (unlock)
        sem_post(&empt_y);   // Increase empty slots


    }}
int main() {
    int num_producers, num_consumers;
    int produced_items = 0;  // Track the number of items produced
    int consumed_items = 0;  // Track the number of items consumed
    cout << "Enter number of producers: ";
    cin >> num_producers;
    cout << "Enter number of consumers: ";
    cin >> num_consumers;
    sem_init(&empt_y, 0, BUFFER_SIZE);  // Initially buffer has all empty slots
    sem_init(&full, 0, 0);             // Initially buffer has no full slots
    sem_init(&mtx, 0, 1);            // (sem_name, initial_val, how_many)

    thread producers[num_producers];
    thread consumers[num_consumers];

for (int i = 0; i < num_producers; i++)
    producers[i] = thread(producer, i + 1, ref(produced_items));

for (int i = 0; i < num_consumers; i++)
    consumers[i] = thread(consumer, i + 1, ref(consumed_items));

for (int i = 0; i < num_producers; i++) producers[i].join();
for (int i = 0; i < num_consumers; i++) consumers[i].join();
}







						8.Reader_writer




#include <bits/stdc++.h>
#include <semaphore.h>
#include <unistd.h>
using namespace std;

int read_count = 0;

sem_t rw_mutex;     // Writer lock
sem_t queue_mutex;  // To ensure fair access
sem_t mtx;          // Protects read_count
sem_t print_sem;    // For synchronized printing (binary semaphore)

void reader(int id) {
    sem_wait(&queue_mutex);  // Wait in queue

    sem_wait(&mtx);          // Lock read_count update
    read_count++;
    if (read_count == 1)
        sem_wait(&rw_mutex); // First reader locks writer
    sem_post(&mtx);          // Unlock read_count

    sem_post(&queue_mutex);  // Allow next in queue

    sem_wait(&print_sem);
    cout << "Reader " << id << " is reading..." << endl;
    sem_post(&print_sem);

    sleep(2);  // Simulate reading

    sem_wait(&print_sem);
    cout << "Reader " << id << " finished reading." << endl;
    sem_post(&print_sem);

    sem_wait(&mtx);        // Lock read_count update
    read_count--;
    if (read_count == 0)
        sem_post(&rw_mutex);  // Last reader unlocks writer
    sem_post(&mtx);        // Unlock read_count
}

void writer(int id ) {
    sem_wait(&queue_mutex);  // Wait in queue
    sem_wait(&rw_mutex);     // Lock writer
    sem_post(&queue_mutex);  // Allow others to queue

    sem_wait(&print_sem);
    cout << "Writer " << id << " is writing..." << endl;
    sem_post(&print_sem);

    sleep(1);  // Simulate writing

    sem_wait(&print_sem);
    cout << "Writer " << id << " finished writing." << endl;
    sem_post(&print_sem);

    sem_post(&rw_mutex);  // Unlock writer
}

int main() {
    int num_readers, num_writers;
    cout << "Enter number of readers: ";
    cin >> num_readers;
    cout << "Enter number of writers: ";
    cin >> num_writers;

    sem_init(&rw_mutex, 0, 1);
    sem_init(&queue_mutex, 0, 1);
    sem_init(&mtx, 0, 1);
    sem_init(&print_sem, 0, 1);

    thread readers[num_readers];
    thread writers[num_writers];

for (int i = 0; i < num_readers; i++)
    readers[i] = thread(reader, i);

for (int i = 0; i < num_writers; i++)
    writers[i] = thread(writer, i);

for (int i = 0; i < num_readers; i++) readers[i].join();
for (int i = 0; i < num_writers; i++) writers[i].join();
    }




					9.First Fit ALGORITHM


#include<iostream>
using namespace std;
 void firstFit(int n,int m,int blockSize[],int procSize[])
 {
     int allocation[n];
     for(int i=0;i<n;i++) allocation[i]=-1;
     for(int i=0;i<n;i++)
     {
         for(int j=0;j<m;j++)
         {
             if(blockSize[j]>=procSize[i])
             {
                 allocation[i]=j;
                 blockSize[j]-=procSize[i];
                 break;
             }
         }
     }
     cout<<"\nProcess No.\tProcess Size\tBlock No."<<endl;
     for(int i=0;i<n;i++)
     {
         cout<<" "<<i+1<<"\t\t"<<procSize[i]<<"\t\t";
         if(allocation[i]!=-1)
            cout<<allocation[i]+1;
         else
            cout<<"Not allocated";
         cout<<endl;
     }

 }
int main()
{
    int n,m;
    cout<<"Enter number of blocks: ";
    cin>>m;
    int blockSize[m];
    cout<<"Enter blocks Size: ";
    for(int i=0;i<m;i++) cin>>blockSize[i];
    cout<<"Enter number of process: ";
    cin>>n;
    int procSize[n];
    cout<<"Enter process Size: ";
    for(int i=0;i<n;i++) cin>>procSize[i];
    firstFit(n,m,blockSize,procSize);

}


							10.Best Fit


#include <iostream>
using namespace std;

void bestFit(int blockSize[], int m, int processSize[], int n) {
    int allocation[n];

    // Initially no process is allocated
    for (int i = 0; i < n; i++)
        allocation[i] = -1;

    // Pick each process and find the best block
    for (int i = 0; i < n; i++) {
        int bestIdx = -1;
        for (int j = 0; j < m; j++) {
            if (blockSize[j] >= processSize[i]) {
                if (bestIdx == -1 || blockSize[j] < blockSize[bestIdx])
                    bestIdx = j;
            }
        }

        if (bestIdx != -1) {
            allocation[i] = bestIdx;
            blockSize[bestIdx] -= processSize[i];
        }
    }

    cout << "\nProcess No.\tProcess Size\tBlock no.\n";
    for (int i = 0; i < n; i++) {
        cout << " " << i+1 << "\t\t" << processSize[i] << "\t\t";
        if (allocation[i] != -1)
            cout << allocation[i] + 1;
        else
            cout << "Not Allocated";
        cout << endl;
    }
}

int main() {
    int m, n;
    cout << "Enter number of memory blocks: ";
    cin >> m;
    int blockSize[m];
    cout << "Enter sizes of memory blocks:\n";
    for (int i = 0; i < m; i++)
        cin >> blockSize[i];

    cout << "Enter number of processes: ";
    cin >> n;
    int processSize[n];
    cout << "Enter sizes of processes:\n";
    for (int i = 0; i < n; i++)
        cin >> processSize[i];

    bestFit(blockSize, m, processSize, n);

    return 0;
}





						11.FIFO	 PAGE REPLACEMENT





#include <bits/stdc++.h>
using namespace std;

int main()
{
    int n, f, hit = 0, fault = 0;
    cout << "Enter number of pages: ";
    cin >> n;
    int pages[n];
    cout << "Enter the page reference string:\n";
    for (int &x : pages) cin >> x;

    cout << "Enter number of frames: ";
    cin >> f;

    queue<int> frames; // <-- changed for FIFO: using queue for order
    unordered_set<int> inFrames; // <-- changed: fast lookup for page in frames

    for (int i = 0; i < n; i++)
    {
        if (inFrames.find(pages[i]) != inFrames.end()) // Page is already in frames
        {
            hit++;
        }
        else
        {
            fault++; // Page fault occurs

            if (frames.size() == f) // If frames are full
            {
                int removed = frames.front(); // Remove the oldest page
                frames.pop();
                inFrames.erase(removed);
            }
            frames.push(pages[i]);   // Add new page
            inFrames.insert(pages[i]);
        }
    }

    cout << "\nTotal Page Hits: " << hit << endl;
    cout << "Total Page Faults: " << fault << endl;

    float hitRatio = (float)hit / n;
    float faultRatio = (float)fault / n;

    cout << fixed << setprecision(2); // for 2 decimal places
    cout << "Hit Ratio: " << hitRatio << endl;
    cout << "Fault Ratio: " << faultRatio << endl;

    return 0;
}






						12.OPTIMAL PAGE REPLACEMENT ALGORITHM




#include <bits/stdc++.h>
using namespace std;

int main()
{
    int n, f, hit = 0, fault = 0;
    cout << "Enter number of pages: ";
    cin >> n;

    int pages[n];
    cout << "Enter Page Reference String: ";
    for (int &x : pages)
        cin >> x;

    cout << "Enter number of frames: ";
    cin >> f;

    vector<int> frames;

    for (int i = 0; i < n; i++) {
        // Page Hit
        if (find(frames.begin(), frames.end(), pages[i]) != frames.end()) {
            hit++;
        }
        // Page Fault
        else {
            fault++;
            if (frames.size() < f) {
                frames.push_back(pages[i]);
            } else {
                // Find the page in frame that will not be used for the longest time
                int farthest = -1, idx = -1;
                for (int j = 0; j < frames.size(); j++) {
                    int k;
                    for (k = i + 1; k < n; k++) {
                        if (frames[j] == pages[k])
                            break;
                    }
                    if (k == n) { // Not used again
                        idx = j;
                        break;
                    }
                    if (k > farthest) {
                        farthest = k;
                        idx = j;
                    }
                }
                frames[idx] = pages[i];
            }
        }
    }

    cout << "Hit : " << hit << endl;
    cout << "Fault : " << fault << endl;

    double hitRatio = ((double)hit / n) * 100;
    double faultRatio = ((double)fault / n) * 100;

    cout << fixed << setprecision(2);
    cout << "Hit Ratio: " << hitRatio << "%" << endl;
    cout << "Fault Ratio: " << faultRatio << "%" << endl;

    return 0;
}










							13.LRU PAGE REPLACEMENT






#include<bits/stdc++.h>
using namespace std;

int main()
{
    int n,f,hit=0,fault=0;
    cout<<"Enter no of pages :";
    cin>> n;
    int pages[n];//mone thake na
    cout<<"Enter Reference String  : ";
    for(int &x:pages) cin>>x;
    cout<<"Enter no of Frames:";
    cin>>f;

    vector<int>frames;

    for(int i=0;i<n;i++)
    {
        if(find(frames.begin(), frames.end(), pages[i]) !=frames.end())
        {
            hit++;
            frames.erase(find(frames.begin(),frames.end(),pages[i]));
            frames.push_back(pages[i]);
        }
        else
        {
            fault++;
            if(frames.size() == f)//mone thake na
            frames.erase(frames.begin());//find lekha jabe na
            frames.push_back(pages[i]);

        }
    }
    cout<<"Hit: "<<hit<<endl;
    cout<<"Fault: "<<fault<<endl;

    double hitRatio = (double)hit/n;
    double faultRatio = (double)fault / n;
    cout<<fixed<<setprecision(2);
    cout<<"\nHit ration: "<<hitRatio<<endl;
    cout<<"\nMiss Ration: "<<faultRatio<<endl;
}






								14.FRAME ALLOCATION






#include <iostream>
#include <vector>
using namespace std;

struct P {
    int id, p, f;
};

void alloc(vector<P>& p, int tf) {
    int tp = 0;
    for (auto& x : p) tp += x.p;
    for (auto& x : p) x.f = (x.p * tf) / tp;
}

void show(const vector<P>& p) {
    cout << "ID | Priority | Frames\n";
    for (const auto& x : p) {
        cout << x.id << "\t" << x.p << "\t" << x.f << "\n";
    }
}

int main() {
    int tf, n;
    cout << "Enter total number of frames: ";
    cin >> tf;
    cout << "Enter number of processes: ";
    cin >> n;

    vector<P> p(n);

    for (int i = 0; i < n; ++i) {
        p[i].id = i + 1;
        cout << "Enter priority for process " << p[i].id << ": ";
        cin >> p[i].p;
    }

    alloc(p, tf);
    show(p);
    return 0;
}
